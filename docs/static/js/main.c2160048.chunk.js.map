{"version":3,"sources":["components/CharacterCard.js","components/CharacterList.js","services/api.js","components/Filters.js","components/App.js","reportWebVitals.js","index.js"],"names":["CharacterCard","props","src","image","alt","name","species","CharacterList","characterItem","characters","map","card","id","fetch","then","response","json","data","results","Filters","htmlFor","type","placeholder","onChange","ev","handleInputChange","target","value","App","useState","setCharacters","inputText","setInputText","useEffect","api","filteredCharacters","filter","character","toUpperCase","includes","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAYeA,EAVO,SAACC,GACrB,OACE,oCACE,qBAAKC,IAAKD,EAAME,MAAOC,IAAKH,EAAMI,OAClC,6BAAKJ,EAAMI,OACX,4BAAIJ,EAAMK,cCeDC,EAnBO,SAACN,GACrB,IAAMO,EAAgBP,EAAMQ,WAAWC,KAAI,SAACC,GAC1C,OACE,6BACE,cAAC,EAAD,CACER,MAAOQ,EAAKR,MACZE,KAAMM,EAAKN,KACXC,QAASK,EAAKL,WAJTK,EAAKC,OASlB,OACE,6BACGJ,KCTQ,EARQ,WACrB,OAAOK,MAAM,uFACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,OAAOA,EAAKC,YCUHC,G,MAZC,SAAClB,GAIf,OACE,iCACE,uBAAOmB,QAAQ,OAAf,uCACA,uBAAOC,KAAK,OAAOhB,KAAK,OAAOO,GAAG,OAAOU,YAAY,OAAOC,SANtC,SAACC,GACzBvB,EAAMwB,kBAAkBD,EAAGE,OAAOC,eCgCvBC,EA9BH,WAAM,MAEoBC,mBAAS,IAF7B,mBAETpB,EAFS,KAEGqB,EAFH,OAGkBD,mBAAS,IAH3B,mBAGTE,EAHS,KAGEC,EAHF,KAMhBC,qBAAU,WACRC,IAAqBpB,MAAK,SAAAG,GACxBa,EAAcb,QAEf,IAGH,IAIMkB,EAAqB1B,EAAW2B,QAAO,SAAAC,GAC3C,OAAOA,EAAUhC,KAAKiC,cAAcC,SAASR,EAAUO,kBAIzD,OACE,sBAAKE,UAAU,MAAf,UACE,cAAC,EAAD,CAASf,kBAXa,SAAAM,GACxBC,EAAaD,MAWX,cAAC,EAAD,CAAetB,WAAY0B,QCnBlBM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c2160048.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CharacterCard = (props) => {\r\n  return (\r\n    <article>\r\n      <img src={props.image} alt={props.name} />\r\n      <h2>{props.name}</h2>\r\n      <p>{props.species}</p>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default CharacterCard;","import React from 'react';\r\nimport CharacterCard from './CharacterCard';\r\n\r\nconst CharacterList = (props) => {\r\n  const characterItem = props.characters.map((card) => {\r\n    return (\r\n      <li key={card.id}>\r\n        <CharacterCard\r\n          image={card.image}\r\n          name={card.name}\r\n          species={card.species}\r\n        />\r\n      </li>\r\n    )\r\n  })\r\n  return (\r\n    <ul>\r\n      {characterItem}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default CharacterList;","const getDataFromApi = () => {\r\n  return fetch('https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      return data.results;\r\n    });\r\n};\r\n\r\nexport default {\r\n  getDataFromApi: getDataFromApi\r\n};","import React from 'react';\r\n\r\nconst Filters = (props) => {\r\n  const handleInputChange = (ev) => {\r\n    props.handleInputChange(ev.target.value);\r\n  }\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"name\">Find a character by name:</label>\r\n      <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Rick\" onChange={handleInputChange} />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Filters;","import React, { useEffect, useState } from 'react';\nimport CharacterList from './CharacterList';\nimport api from '../services/api';\nimport '../stylesheets/App.css';\nimport Filters from './Filters';\n\nconst App = () => {\n  //state\n  const [characters, setCharacters] = useState([]);\n  const [inputText, setInputText] = useState('');\n\n  //api\n  useEffect(() => {\n    api.getDataFromApi().then(data => {\n      setCharacters(data);\n    });\n  }, []);\n\n  //events\n  const handleInputChange = inputText => {\n    setInputText(inputText);\n  };\n\n  const filteredCharacters = characters.filter(character => {\n    return character.name.toUpperCase().includes(inputText.toUpperCase());\n  });\n\n  //paint\n  return (\n    <div className=\"App\">\n      <Filters handleInputChange={handleInputChange} />\n      <CharacterList characters={filteredCharacters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/stylesheets/index.css';\nimport App from '../src/components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}